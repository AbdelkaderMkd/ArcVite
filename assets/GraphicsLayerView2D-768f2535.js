import{g as p,j as o,V as a,R as m,a as s,b as g,c as l}from"./index-7af450d7.js";import{f as c,d as n}from"./LayerView-e9f88212.js";import{i as d}from"./GraphicContainer-4fe15db7.js";import{o as u}from"./GraphicsView2D-6fcd4698.js";import"./Container-1bd2a8b7.js";import"./parser-6c4b5959.js";import"./definitions-5e66166b.js";import"./enums-b14466b3.js";import"./Texture-ddba2d73.js";import"./color-a2405c5c.js";import"./enums-f1a6a48a.js";import"./VertexElementDescriptor-2925c6af.js";import"./BaseGraphicContainer-b3fb92b3.js";import"./FeatureContainer-5e375654.js";import"./AttributeStoreView-00aba7d9.js";import"./TiledDisplayObject-d6b9c2e9.js";import"./LabelClass-411c9c4e.js";import"./labelUtils-623797c2.js";import"./defaultsJSON-b087dd4d.js";import"./featureFlags-78d5fc35.js";import"./diffUtils-e1a6fe87.js";import"./labelingInfo-58602860.js";import"./WGLContainer-82bf5950.js";import"./VertexArrayObject-475aed89.js";import"./ProgramTemplate-5385d3a0.js";import"./GeometryUtils-d05a94d5.js";import"./heatmapUtils-73c81fd5.js";import"./StyleDefinition-29c49b98.js";import"./config-1337d16e.js";import"./earcut-b0b14d3e.js";import"./featureConversionUtils-3aeae00f.js";import"./OptimizedGeometry-33b2eb0d.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./visualVariablesUtils-90138294.js";import"./ExpandedCIM-d3c1e76f.js";import"./BidiEngine-9a40f2f4.js";import"./GeometryUtils-984e8446.js";import"./utils-6b9ab231.js";import"./Rect-ea14f53a.js";import"./quantizationUtils-a383a2df.js";import"./floatRGBA-9e073c80.js";import"./clusterUtils-66bf1196.js";import"./SizeVariable-cf2f4876.js";import"./colorRamps-7576a038.js";import"./LegendOptions-b705a3af.js";import"./lengthUtils-e64d76bb.js";import"./util-9f8e1b8f.js";import"./TileContainer-a40d1c29.js";import"./vec3f32-ad1dc57f.js";import"./normalizeUtils-fbcb2351.js";import"./normalizeUtilsCommon-7cb21fa5.js";import"./normalizeUtilsSync-dfadfc08.js";import"./projectionSupport-d4e23277.js";import"./json-48e3ea08.js";import"./Matcher-aa9563e0.js";import"./tileUtils-c2f19f52.js";import"./TurboLine-d5b37d7d.js";import"./LRUCache-cbaf1d46.js";import"./devEnvironmentUtils-5002a058.js";import"./styleUtils-739c5f34.js";import"./webStyleSymbolUtils-a181071f.js";import"./ComputedAttributeStorage-5513f9f6.js";import"./FieldsIndex-1b2afc91.js";import"./arcadeTimeUtils-8ab169ee.js";import"./executionError-c92d3b85.js";const w={remove(){},pause(){},resume(){}};let e=class extends c(n){constructor(){super(...arguments),this._highlightIds=new Map}attach(){this.graphicsView=new u({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:this.layer.graphics,container:new d(this.view.featuresTilingScheme)}),this._updateHighlight(),this.container.addChild(this.graphicsView.container),this.addAttachHandles(this.layer.on("graphic-update",this.graphicsView.graphicUpdateHandler))}detach(){this.container.removeAllChildren(),this.graphicsView=p(this.graphicsView)}async hitTest(i){return this.graphicsView?this.graphicsView.hitTest(i).map(t=>({type:"graphic",graphic:t,mapPoint:i,layer:this.layer})):null}async fetchPopupFeatures(i){return this.graphicsView?this.graphicsView.hitTest(i).filter(t=>!!t.popupTemplate):[]}queryGraphics(){return Promise.resolve(this.graphicsView.graphics)}update(i){this.graphicsView.processUpdate(i)}moveStart(){}viewChange(){this.graphicsView.viewChange()}moveEnd(){}isUpdating(){return!this.graphicsView||this.graphicsView.updating}highlight(i){let t;typeof i=="number"?t=[i]:i instanceof o?t=[i.uid]:Array.isArray(i)&&i.length>0?t=typeof i[0]=="number"?i:i.map(h=>h&&h.uid):a.isCollection(i)&&i.length>0&&(t=i.map(h=>h&&h.uid).toArray());const r=t==null?void 0:t.filter(m);return r!=null&&r.length?(this._addHighlight(r),{remove:()=>this._removeHighlight(r)}):w}_addHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const r=this._highlightIds.get(t);this._highlightIds.set(t,r+1)}else this._highlightIds.set(t,1);this._updateHighlight()}_removeHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const r=this._highlightIds.get(t)-1;r===0?this._highlightIds.delete(t):this._highlightIds.set(t,r)}this._updateHighlight()}_updateHighlight(){var i;(i=this.graphicsView)==null||i.setHighlight(Array.from(this._highlightIds.keys()))}};s([g()],e.prototype,"graphicsView",void 0),e=s([l("esri.views.2d.layers.GraphicsLayerView2D")],e);const bi=e;export{bi as default};
