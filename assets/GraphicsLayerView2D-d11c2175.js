import{aH as p,aY as o,aO as g,as as m,bp as s,aC as a,aD as c,aF as l}from"./index-3572d442.js";import{m as n}from"./LayerView2D-75cdb63f.js";import{i as d}from"./GraphicContainer-cac9e8c3.js";import{r as u}from"./GraphicsView2D-42b00db6.js";import{u as w}from"./LayerView-e8e5ef51.js";import"./Container-6f579da3.js";import"./definitions-f926d1a5.js";import"./enums-b1d611e3.js";import"./BaseGraphicContainer-3f2a02af.js";import"./FeatureContainer-b839d6c2.js";import"./AttributeStoreView-4c28c213.js";import"./color-5d593af9.js";import"./number-e491b09e.js";import"./WGLContainer-98654cd1.js";import"./WGLBrushVTLSymbol-4e301e2a.js";import"./vec4f32-0d1b2306.js";import"./GeometryUtils-dd03fc25.js";import"./ShaderCompiler-77d0dcb6.js";import"./ProgramTemplate-1a91efd6.js";import"./MaterialKey-05dc7bce.js";import"./alignmentUtils-ae955d28.js";import"./heatmapTextureUtils-61534fe7.js";import"./visualVariablesUtils-1fa1b221.js";import"./cimAnalyzer-150a8296.js";import"./BidiEngine-9a40f2f4.js";import"./labelPoint-bb8bc683.js";import"./GeometryUtils-984e8446.js";import"./Rect-ea14f53a.js";import"./ExpandedCIM-ae1f6e0f.js";import"./util-cd4c507d.js";import"./TileContainer-5e05f4a0.js";import"./normalizeUtilsSync-86570995.js";import"./projectionSupport-cd867045.js";import"./json-48e3ea08.js";import"./Matcher-5a02b3c0.js";import"./tileUtils-c2f19f52.js";import"./TurboLine-dc12a110.js";import"./ComputedAttributeStorage-a3f2b133.js";import"./TimeOnly-b48aab9d.js";let e=class extends n(w){constructor(){super(...arguments),this._highlightIds=new Map}attach(){this.graphicsView=new u({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:this.layer.graphics,container:new d(this.view.featuresTilingScheme)}),this._updateHighlight(),this.container.addChild(this.graphicsView.container),this.addAttachHandles(this.layer.on("graphic-update",this.graphicsView.graphicUpdateHandler))}detach(){this.container.removeAllChildren(),this.graphicsView=p(this.graphicsView)}async hitTest(i){return this.graphicsView?this.graphicsView.hitTest(i).map(t=>({type:"graphic",graphic:t,mapPoint:i,layer:this.layer})):null}async fetchPopupFeatures(i){return this.graphicsView?this.graphicsView.hitTest(i).filter(t=>!!t.popupTemplate):[]}queryGraphics(){return Promise.resolve(this.graphicsView.graphics)}update(i){this.graphicsView.processUpdate(i)}moveStart(){}viewChange(){this.graphicsView.viewChange()}moveEnd(){}isUpdating(){return!this.graphicsView||this.graphicsView.updating}highlight(i){let t;typeof i=="number"?t=[i]:i instanceof o?t=[i.uid]:Array.isArray(i)&&i.length>0?t=typeof i[0]=="number"?i:i.map(r=>r&&r.uid):g.isCollection(i)&&i.length>0&&(t=i.map(r=>r&&r.uid).toArray());const h=t==null?void 0:t.filter(m);return h!=null&&h.length?(this._addHighlight(h),s(()=>this._removeHighlight(h))):s()}_addHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const h=this._highlightIds.get(t);this._highlightIds.set(t,h+1)}else this._highlightIds.set(t,1);this._updateHighlight()}_removeHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const h=this._highlightIds.get(t)-1;h===0?this._highlightIds.delete(t):this._highlightIds.set(t,h)}this._updateHighlight()}_updateHighlight(){var i;(i=this.graphicsView)==null||i.setHighlight(Array.from(this._highlightIds.keys()))}};a([c()],e.prototype,"graphicsView",void 0),e=a([l("esri.views.2d.layers.GraphicsLayerView2D")],e);const hi=e;export{hi as default};
