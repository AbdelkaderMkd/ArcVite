import{aH as w,aI as y,aJ as I,aK as V,aL as v,aM as H,aN as T,aO as n,aP as g,aQ as q,aA as o,aB as u,aD as U}from"./index-80114339.js";import"./Rasterizer-9a17dcd3.js";import"./EffectView-5c6d1913.js";import"./Container-5de58e03.js";import"./BufferPool-56ae37b6.js";import"./enums-b1d611e3.js";import"./WGLContainer-fdf8893b.js";import"./color-7e8a87bb.js";import"./definitions-e92533c5.js";import"./MaterialKey-9578aace.js";import"./number-e491b09e.js";import"./MagnifierPrograms-19977a74.js";import{o as Q}from"./GraphicsView2D-57b184b4.js";import"./AttributeStoreView-6a46204f.js";import"./normalizeUtils-293ed7d1.js";import{t as S,o as f,n as d}from"./imageUtils-898fb77e.js";import{f as C}from"./LayerView2D-5137fb8f.js";import{n as b}from"./HighlightGraphicContainer-f88c4340.js";import{d as k}from"./LayerView-76d3ea4d.js";import{a as F}from"./RefreshableLayerView-814db235.js";import{S as L,U as P}from"./MapServiceLayerViewHelper-cab26bde.js";import"./cimAnalyzer-f75e8982.js";import"./BidiEngine-9a40f2f4.js";import"./GeometryUtils-984e8446.js";import"./alignmentUtils-ae955d28.js";import"./Rect-ea14f53a.js";import"./rasterizingUtils-ae1999a5.js";import"./WGLBrushVTLSymbol-1237c1e5.js";import"./GeometryUtils-dd03fc25.js";import"./ShaderCompiler-77d0dcb6.js";import"./ProgramTemplate-2d71a099.js";import"./heatmapTextureUtils-31d66305.js";import"./pbf-d3223c78.js";import"./imageutils-5929f0f9.js";import"./Matcher-a20aa6a5.js";import"./visualVariablesUtils-cc76e916.js";import"./tileUtils-c2f19f52.js";import"./TurboLine-f6270054.js";import"./ExpandedCIM-6447fec2.js";import"./CircularArray-ef508845.js";import"./throttle-7bf02de9.js";import"./ComputedAttributeStorage-d3d7f802.js";import"./arcadeTimeUtils-073ac556.js";import"./centroid-8e8cfa47.js";import"./normalizeUtilsSync-5bb846cd.js";import"./normalizeUtilsCommon-b32fe8bd.js";import"./projectionSupport-6bece704.js";import"./json-48e3ea08.js";import"./util-143ef882.js";import"./BitmapTileContainer-14617ecf.js";import"./Bitmap-919f2523.js";import"./TileContainer-305473f1.js";import"./BaseGraphicContainer-0dde8662.js";import"./FeatureContainer-a8965b53.js";import"./floorFilterUtils-080a7cd2.js";import"./sublayerUtils-bcde78ab.js";import"./popupUtils-bf6e958a.js";const R=[0,0];let s=class extends F(S(C(k))){constructor(){super(...arguments),this._fetchQueue=null,this._highlightGraphics=new w,this._highlightView=null,this._popupHighlightHelper=null,this._tileStrategy=null,this.layer=null}get resampling(){return!("resampling"in this.layer)||this.layer.resampling!==!1}get tilemapCache(){return"tilemapCache"in this.layer?this.layer.tilemapCache:null}update(e){var t;this._fetchQueue.pause(),this._fetchQueue.state=e.state,this._tileStrategy.update(e),this._fetchQueue.resume(),(t=this._highlightView)==null||t.processUpdate(e)}attach(){const e="tileServers"in this.layer?this.layer.tileServers:null,t=this.tilemapCache;if(this._tileInfoView=new y(this.layer.tileInfo,this.layer.fullExtent,t==null?void 0:t.effectiveMinLOD,t==null?void 0:t.effectiveMaxLOD),this._fetchQueue=new I({tileInfoView:this._tileInfoView,concurrency:e&&10*e.length||10,process:(i,r)=>this.fetchTile(i,r)}),this._tileStrategy=new V({cachePolicy:"keep",resampling:this.resampling,acquireTile:i=>this.acquireTile(i),releaseTile:i=>this.releaseTile(i),tileInfoView:this._tileInfoView}),L(this,this.layer)){const i=this._highlightView=new Q({view:this.view,graphics:this._highlightGraphics,requestUpdateCallback:()=>this.requestUpdate(),container:new b(this.view.featuresTilingScheme),defaultPointSymbolEnabled:!1});this.container.addChild(this._highlightView.container),this._popupHighlightHelper=new P({createFetchPopupFeaturesQueryGeometry:(r,h)=>v(r,h,this.view),highlightGraphics:this._highlightGraphics,highlightGraphicUpdated:(r,h)=>{i.graphicUpdateHandler({graphic:r,property:h})},layerView:this,updatingHandles:this.updatingHandles})}this.requestUpdate(),this.addAttachHandles(H(()=>this.resampling,()=>{this.doRefresh()})),super.attach()}detach(){var e;super.detach(),this._tileStrategy.destroy(),this._fetchQueue.clear(),this.container.removeAllChildren(),(e=this._popupHighlightHelper)==null||e.destroy(),this._fetchQueue=this._tileStrategy=this._tileInfoView=this._popupHighlightHelper=null}async fetchPopupFeatures(e,t){return this._popupHighlightHelper?this._popupHighlightHelper.fetchPopupFeatures(e,t):[]}highlight(e){return this._popupHighlightHelper?this._popupHighlightHelper.highlight(e):{remove(){}}}moveStart(){this.requestUpdate()}viewChange(){this.requestUpdate()}moveEnd(){this.requestUpdate()}supportsSpatialReference(e){var t;return T((t=this.layer.tileInfo)==null?void 0:t.spatialReference,e)}async doRefresh(){!this.attached||this.updateRequested||this.suspended||(this._fetchQueue.reset(),this._tileStrategy.refresh(e=>this._enqueueTileFetch(e)))}isUpdating(){var e;return((e=this._fetchQueue)==null?void 0:e.updating)??!1}acquireTile(e){const t=this._bitmapView.createTile(e),i=t.bitmap;return[i.x,i.y]=this._tileInfoView.getTileCoords(R,t.key),i.resolution=this._tileInfoView.getTileResolution(t.key),[i.width,i.height]=this._tileInfoView.tileInfo.size,this._enqueueTileFetch(t),this._bitmapView.addChild(t),this.requestUpdate(),t}releaseTile(e){this._fetchQueue.abort(e.key.id),this._bitmapView.removeChild(e),e.once("detach",()=>e.destroy()),this.requestUpdate()}async fetchTile(e,t={}){const i=this.tilemapCache,{signal:r,resamplingLevel:h=0}=t;if(!i)try{return await this._fetchImage(e,r)}catch(a){if(!n(a)&&!this.resampling)return f(this._tileInfoView.tileInfo.size);if(h<3){const m=this._tileInfoView.getTileParentId(e.id);if(m){const c=new g(m),_=await this.fetchTile(c,{...t,resamplingLevel:h+1});return d(this._tileInfoView,_,c,e)}}throw a}const l=new g(0,0,0,0);let p;try{if(await i.fetchAvailabilityUpsample(e.level,e.row,e.col,l,{signal:r}),l.level!==e.level&&!this.resampling)return f(this._tileInfoView.tileInfo.size);p=await this._fetchImage(l,r)}catch(a){if(n(a))throw a;p=await this._fetchImage(e,r)}return this.resampling?d(this._tileInfoView,p,l,e):p}async _enqueueTileFetch(e){if(!this._fetchQueue.has(e.key.id)){try{const t=await this._fetchQueue.push(e.key);e.bitmap.source=t,e.bitmap.width=this._tileInfoView.tileInfo.size[0],e.bitmap.height=this._tileInfoView.tileInfo.size[1],e.requestRender(),e.once("attach",()=>this.requestUpdate())}catch(t){n(t)||q.getLogger(this).error(t)}this.requestUpdate()}}async _fetchImage(e,t){return this.layer.fetchImageBitmapTile(e.level,e.row,e.col,{signal:t})}};o([u()],s.prototype,"_fetchQueue",void 0),o([u()],s.prototype,"resampling",null),o([u()],s.prototype,"tilemapCache",null),s=o([U("esri.views.2d.layers.TileLayerView2D")],s);const Ae=s;export{Ae as default};
