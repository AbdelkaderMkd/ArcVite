import{bF as _,a6 as S,N as v,a9 as T,a1 as m,d1 as b,c_ as w,T as u,aV as O,b7 as $,aF as R,d2 as W,a as s,b as a,aS as P,aP as U,d3 as j,c as L,aE as N}from"./index-7af450d7.js";import{O as A}from"./MultiOriginJSONSupport-e7108a96.js";import{i as B}from"./APIKeyMixin-973fd1e3.js";import{p as M}from"./ArcGISCachedService-0d6dd5b5.js";import{E as k,f as C,Y as I}from"./SublayersOwner-c788cffa.js";import{l as D}from"./ArcGISService-864476a0.js";import{a as J}from"./BlendLayer-c340bf2a.js";import{o as q}from"./CustomParametersMixin-2761d37f.js";import{c as E}from"./OperationalLayer-e9632b36.js";import{j as G}from"./PortalLayer-3cc055a3.js";import{p as V}from"./RefreshableLayer-d99e4996.js";import{t as F}from"./ScaleRangeLayer-561bf95e.js";import{f as x}from"./commonProperties-6df6e9c8.js";import{o as y}from"./imageBitmapUtils-5a9fbe32.js";import"./TileInfoTilemapCache-fce4fb19.js";import"./TilemapCache-f323c454.js";import"./ByteSizeUnit-d4757d40.js";import"./LRUCache-cbaf1d46.js";import"./Version-8dc7cd3d.js";import"./portalItemUtils-dccd86d0.js";import"./UniqueValueRenderer-ae66d11f.js";import"./LegendOptions-b705a3af.js";import"./diffUtils-e1a6fe87.js";import"./SizeVariable-cf2f4876.js";import"./colorRamps-7576a038.js";import"./lengthUtils-e64d76bb.js";import"./ColorStop-883f8268.js";import"./featureFlags-78d5fc35.js";import"./styleUtils-739c5f34.js";import"./jsonUtils-682433dd.js";import"./DictionaryLoader-67337d0e.js";import"./FieldsIndex-1b2afc91.js";import"./heatmapUtils-73c81fd5.js";import"./LabelClass-411c9c4e.js";import"./labelUtils-623797c2.js";import"./defaultsJSON-b087dd4d.js";import"./QueryTask-2ec074db.js";import"./Query-4c693c57.js";import"./Field-fc2bd34d.js";import"./fieldType-37e9db9e.js";import"./executeForIds-66e93137.js";import"./query-a617fcf5.js";import"./normalizeUtils-fbcb2351.js";import"./normalizeUtilsCommon-7cb21fa5.js";import"./pbfQueryUtils-4625bc70.js";import"./pbf-5f594bd6.js";import"./OptimizedGeometry-33b2eb0d.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./queryZScale-beb984cb.js";import"./executeQueryJSON-1d7366c2.js";import"./FeatureSet-304f2314.js";import"./executeQueryPBF-21794b64.js";import"./featureConversionUtils-3aeae00f.js";import"./FeatureType-67661609.js";import"./FeatureTemplate-8916744f.js";import"./labelingInfo-58602860.js";import"./serviceCapabilitiesUtils-bb1dfa3f.js";import"./AttachmentQuery-369a7bf2.js";import"./popupUtils-5a880190.js";import"./sublayerUtils-b5b269c3.js";import"./jsonUtils-42356934.js";import"./parser-6c4b5959.js";import"./ElevationInfo-01ca0eb8.js";var d;const f=["Canvas/World_Dark_Gray_Base","Canvas/World_Dark_Gray_Reference","Canvas/World_Light_Gray_Base","Canvas/World_Light_Gray_Reference","Elevation/World_Hillshade","Elevation/World_Hillshade_Dark","Ocean/World_Ocean_Base","Ocean/World_Ocean_Reference","Ocean_Basemap","Reference/World_Boundaries_and_Places","Reference/World_Boundaries_and_Places_Alternate","Reference/World_Transportation","World_Imagery","World_Street_Map","World_Topo_Map"];let i=d=class extends J(F(k(M(C(E(G(D(A(_(V(B(q(N))))))))))))){constructor(...e){super(...e),this.listMode="show",this.isReference=null,this.operationalLayerType="ArcGISTiledMapServiceLayer",this.resampling=!0,this.sourceJSON=null,this.spatialReference=null,this.path=null,this.sublayers=null,this.type="tile",this.url=null}normalizeCtorArgs(e,r){return typeof e=="string"?{url:e,...r}:e}load(e){const r=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(S).then(()=>this._fetchService(r))),Promise.resolve(this)}get attributionDataUrl(){var r;const e=(r=this.parsedUrl)==null?void 0:r.path.toLowerCase();return e?this._getDefaultAttribution(this._getMapName(e)):null}readSpatialReference(e,r){return(e=e||r.tileInfo&&r.tileInfo.spatialReference)&&v.fromJSON(e)}writeSublayers(e,r,t,o){if(!this.loaded||!e)return;const p=e.slice().reverse().flatten(({sublayers:l})=>l&&l.toArray().reverse()).toArray(),n=[],c={writeSublayerStructure:!1,...o};p.forEach(l=>{const h=l.write({},c);n.push(h)}),n.some(l=>Object.keys(l).length>1)&&(r.layers=n)}get tileServers(){var e;return this._getDefaultTileServers((e=this.parsedUrl)==null?void 0:e.path)}castTileServers(e){return Array.isArray(e)?e.map(r=>T(r).path):null}fetchTile(e,r,t,o={}){const{signal:p}=o,n=this.getTileUrl(e,r,t),c={responseType:"image",signal:p,query:{...this.refreshParameters}};return m(n,c).then(l=>l.data)}async fetchImageBitmapTile(e,r,t,o={}){const{signal:p}=o;if(this.fetchTile!==d.prototype.fetchTile){const h=await this.fetchTile(e,r,t,o);return y(h,e,r,t,p)}const n=this.getTileUrl(e,r,t),c={responseType:"blob",signal:p,query:{...this.refreshParameters}},{data:l}=await m(n,c);return y(l,e,r,t,p)}getTileUrl(e,r,t){var c,l;const o=!this.capabilities.operations.supportsTileMap&&this.supportsBlankTile,p=b({...(c=this.parsedUrl)==null?void 0:c.query,blankTile:!o&&null,...this.customParameters,token:this.apiKey}),n=this.tileServers;return`${n&&n.length?n[r%n.length]:(l=this.parsedUrl)==null?void 0:l.path}/tile/${e}/${r}/${t}${p?"?"+p:""}`}loadAll(){return w(this,e=>{e(this.allSublayers)})}_fetchService(e){return new Promise((r,t)=>{if(this.sourceJSON){if(this.sourceJSON.bandCount!=null&&this.sourceJSON.pixelSizeX!=null)throw new u("tile-layer:unsupported-url","use ImageryTileLayer to open a tiled image service");return void r({data:this.sourceJSON})}if(!this.parsedUrl)throw new u("tile-layer:undefined-url","layer's url is not defined");const o=O(this.parsedUrl.path);if(o!=null&&o.serverType==="ImageServer")throw new u("tile-layer:unsupported-url","use ImageryTileLayer to open a tiled image service");m(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},responseType:"json",signal:e}).then(r,t)}).then(r=>{let t=this.url;if(r.ssl&&(t=this.url=t.replace(/^http:/i,"https:")),this.sourceJSON=r.data,this.read(r.data,{origin:"service",url:this.parsedUrl}),this.version===10.1&&!$(t))return this._fetchServerVersion(t,e).then(o=>{this.read({currentVersion:o})}).catch(()=>{})})}_fetchServerVersion(e,r){if(!R(e))return Promise.reject();const t=e.replace(/(.*\/rest)\/.*/i,"$1")+"/info";return m(t,{query:{f:"json",...this.customParameters,token:this.apiKey},responseType:"json",signal:r}).then(o=>{if(o.data&&o.data.currentVersion)return o.data.currentVersion;throw new u("tile-layer:version-not-available")})}_getMapName(e){const r=e.match(/^(?:https?:)?\/\/(server\.arcgisonline\.com|services\.arcgisonline\.com|ibasemaps-api\.arcgis\.com)\/arcgis\/rest\/services\/([^\/]+(\/[^\/]+)*)\/mapserver/i);return r?r[2]:void 0}_getDefaultAttribution(e){if(e==null)return null;let r;e=e.toLowerCase();for(let t=0,o=f.length;t<o;t++)if(r=f[t],r.toLowerCase().includes(e))return W("//static.arcgis.com/attribution/"+r);return null}_getDefaultTileServers(e){if(e==null)return[];const r=e.search(/^(?:https?:)?\/\/server\.arcgisonline\.com/i)!==-1,t=e.search(/^(?:https?:)?\/\/services\.arcgisonline\.com/i)!==-1;return r||t?[e,e.replace(r?/server\.arcgisonline/i:/services\.arcgisonline/i,r?"services.arcgisonline":"server.arcgisonline")]:[]}get hasOverriddenFetchTile(){return!this.fetchTile[g]}};s([a({readOnly:!0})],i.prototype,"attributionDataUrl",null),s([a({type:["show","hide","hide-children"]})],i.prototype,"listMode",void 0),s([a({json:{read:!0,write:!0}})],i.prototype,"blendMode",void 0),s([a({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],i.prototype,"isReference",void 0),s([a({readOnly:!0,type:["ArcGISTiledMapServiceLayer"]})],i.prototype,"operationalLayerType",void 0),s([a({type:Boolean})],i.prototype,"resampling",void 0),s([a()],i.prototype,"sourceJSON",void 0),s([a({type:v})],i.prototype,"spatialReference",void 0),s([P("spatialReference",["spatialReference","tileInfo"])],i.prototype,"readSpatialReference",null),s([a({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],i.prototype,"path",void 0),s([a({readOnly:!0})],i.prototype,"sublayers",void 0),s([U("sublayers",{layers:{type:[I]}})],i.prototype,"writeSublayers",null),s([a({json:{read:!1,write:!1}})],i.prototype,"popupEnabled",void 0),s([a()],i.prototype,"tileServers",null),s([j("tileServers")],i.prototype,"castTileServers",null),s([a({readOnly:!0,json:{read:!1}})],i.prototype,"type",void 0),s([a(x)],i.prototype,"url",void 0),i=d=s([L("esri.layers.TileLayer")],i);const g=Symbol("default-fetch-tile");i.prototype.fetchTile[g]=!0;const tr=i;export{tr as default};
