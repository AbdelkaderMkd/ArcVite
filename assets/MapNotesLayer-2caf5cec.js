import{i as I,a as o,b as l,eC as k,c as L,aE as $,cL as W,cI as q,cK as M,eD as H,N as S,V as v,Q as N,bM as E,eE as J,e9 as O,eF as D,dO as R,j as K,T as Q,bm as U,S as V,bs as Y,bp as X,bq as Z,aI as ee,aD as T,aS as h,aP as te,aM as re,eG as P}from"./index-380a2258.js";import{O as oe}from"./MultiOriginJSONSupport-e8213578.js";import{b as ie}from"./normalizeUtils-58fe578b.js";import ae from"./FeatureLayer-86ab4c37.js";import{a as j}from"./BlendLayer-81af41d8.js";import{t as G}from"./ScaleRangeLayer-aecb0b11.js";import{h as le}from"./ElevationInfo-3d9c2393.js";import{n as ne}from"./objectIdUtils-789e911a.js";import{c as se}from"./OperationalLayer-8b205f9f.js";import{j as pe}from"./PortalLayer-6b5b7d1e.js";import{y as _}from"./Field-4d9a88bc.js";import"./normalizeUtilsCommon-7af058c9.js";import"./UniqueValueRenderer-58269831.js";import"./LegendOptions-17fd4751.js";import"./diffUtils-b0a235f1.js";import"./SizeVariable-d8ab9216.js";import"./colorRamps-6126e357.js";import"./lengthUtils-889f6edb.js";import"./ColorStop-fe3078a4.js";import"./featureFlags-299d190b.js";import"./styleUtils-47c8baef.js";import"./jsonUtils-9f4ab390.js";import"./DictionaryLoader-1832290c.js";import"./LRUCache-aabaf9b5.js";import"./Version-503e0c4f.js";import"./FieldsIndex-d60bbdb3.js";import"./heatmapUtils-4d2d0318.js";import"./LabelClass-0fb75dfd.js";import"./labelUtils-d5d366f4.js";import"./defaultsJSON-b087dd4d.js";import"./FeatureLayerBase-7bf5fd6f.js";import"./commonProperties-1dba9a54.js";import"./featureLayerUtils-323a09f7.js";import"./AttachmentQuery-fbc948f4.js";import"./Query-3115ba75.js";import"./RelationshipQuery-7626aff3.js";import"./fieldType-c28ad4d4.js";import"./serviceCapabilitiesUtils-a726843c.js";import"./editsZScale-f431ca3b.js";import"./queryZScale-75e81056.js";import"./FeatureSet-b0a5d084.js";import"./APIKeyMixin-fc4d7ce4.js";import"./ArcGISService-9b1b0150.js";import"./CustomParametersMixin-8ce2742f.js";import"./EditBusLayer-eed14a99.js";import"./FeatureEffectLayer-fcd6e25d.js";import"./FeatureEffect-bd6e11f4.js";import"./jsonUtils-ed52edc3.js";import"./parser-7805afd4.js";import"./FeatureReductionLayer-6ec4fc3b.js";import"./clusterUtils-937e2dd4.js";import"./OrderedLayer-c25fd245.js";import"./RefreshableLayer-93e1bf94.js";import"./TemporalLayer-24479507.js";import"./FeatureTemplate-d2ecc1d6.js";import"./FeatureType-ca211963.js";import"./fieldProperties-bfa6a3e8.js";import"./labelingInfo-8b7ed609.js";import"./versionUtils-bb73bb49.js";import"./styleUtils-e1fb55d8.js";import"./TopFeaturesQuery-b0fdab1a.js";import"./popupUtils-5dcd007f.js";import"./portalItemUtils-e3307100.js";let d=class extends j(G($)){constructor(e){super(e),this.elevationInfo=null,this.graphics=new I,this.screenSizePerspectiveEnabled=!0,this.type="graphics",this.internal=!1}destroy(){this.removeAll(),this.graphics.destroy()}add(e){return this.graphics.add(e),this}addMany(e){return this.graphics.addMany(e),this}removeAll(){return this.graphics.removeAll(),this}remove(e){this.graphics.remove(e)}removeMany(e){this.graphics.removeMany(e)}on(e,t){return super.on(e,t)}graphicChanged(e){this.emit("graphic-update",e)}};o([l({type:le})],d.prototype,"elevationInfo",void 0),o([l(k(I,"graphics"))],d.prototype,"graphics",void 0),o([l({type:["show","hide"]})],d.prototype,"listMode",void 0),o([l()],d.prototype,"screenSizePerspectiveEnabled",void 0),o([l({readOnly:!0})],d.prototype,"type",void 0),o([l({constructOnly:!0})],d.prototype,"internal",void 0),d=o([L("esri.layers.GraphicsLayer")],d);const ye=d;function b(e){return e.featureCollectionType==="markup"||e.layers.some(t=>t.layerDefinition.visibilityField!=null||!B(t))}function B({layerDefinition:e,featureSet:t}){const r=e.geometryType??t.geometryType;return C.find(i=>{var a,s,p;return r===i.geometryTypeJSON&&((p=(s=(a=e.drawingInfo)==null?void 0:a.renderer)==null?void 0:s.symbol)==null?void 0:p.type)===i.identifyingSymbol.type})}function F(){return new re({xmin:-180,ymin:-90,xmax:180,ymax:90})}const x=new _({name:"OBJECTID",alias:"OBJECTID",type:"oid",nullable:!1,editable:!1}),me=new _({name:"title",alias:"Title",type:"string",nullable:!0,editable:!0});let m=class extends ye{constructor(e){super(e),this.visibilityMode="inherited"}initialize(){for(const e of this.graphics)e.sourceLayer=this.layer;this.graphics.on("after-add",e=>{e.item.sourceLayer=this.layer}),this.graphics.on("after-remove",e=>{e.item.sourceLayer=null})}get fullExtent(){var r;const e=(r=this.layer)==null?void 0:r.spatialReference,t=this.fullBounds;return e?t==null?O(F(),e).geometry:R(t,e):null}get fullBounds(){var r;const e=(r=this.layer)==null?void 0:r.spatialReference;if(!e)return null;const t=E();return this.graphics.forEach(i=>{const a=i.geometry!=null?O(i.geometry,e).geometry:null;a!=null&&J(t,a.type==="point"?a:a.extent,t)}),D(t,P)?null:t}get sublayers(){return this.graphics}};o([l({readOnly:!0})],m.prototype,"fullExtent",null),o([l({readOnly:!0})],m.prototype,"fullBounds",null),o([l({readOnly:!0})],m.prototype,"sublayers",null),o([l()],m.prototype,"layer",void 0),o([l()],m.prototype,"layerId",void 0),o([l({readOnly:!0})],m.prototype,"visibilityMode",void 0),m=o([L("esri.layers.MapNotesLayer.MapNotesSublayer")],m);const C=[{geometryType:"polygon",geometryTypeJSON:"esriGeometryPolygon",id:"polygonLayer",layerId:0,title:"Polygons",identifyingSymbol:new W().toJSON()},{geometryType:"polyline",geometryTypeJSON:"esriGeometryPolyline",id:"polylineLayer",layerId:1,title:"Polylines",identifyingSymbol:new q().toJSON()},{geometryType:"multipoint",geometryTypeJSON:"esriGeometryMultipoint",id:"multipointLayer",layerId:2,title:"Multipoints",identifyingSymbol:new M().toJSON()},{geometryType:"point",geometryTypeJSON:"esriGeometryPoint",id:"pointLayer",layerId:3,title:"Points",identifyingSymbol:new M().toJSON()},{geometryType:"point",geometryTypeJSON:"esriGeometryPoint",id:"textLayer",layerId:4,title:"Text",identifyingSymbol:new H().toJSON()}];let n=class extends j(G(se(pe(oe($))))){constructor(e){super(e),this.capabilities={operations:{supportsMapNotesEditing:!0}},this.featureCollections=null,this.featureCollectionJSON=null,this.featureCollectionType="notes",this.legendEnabled=!1,this.listMode="hide-children",this.minScale=0,this.maxScale=0,this.spatialReference=S.WGS84,this.sublayers=new v(C.map(t=>new m({id:t.id,layerId:t.layerId,title:t.title,layer:this}))),this.title="Map Notes",this.type="map-notes",this.visibilityMode="inherited"}readCapabilities(e,t,r){return{operations:{supportsMapNotesEditing:!b(t)&&(r==null?void 0:r.origin)!=="portal-item"}}}readFeatureCollections(e,t,r){if(!b(t))return null;const i=t.layers.map(a=>{const s=new ae;return s.read(a,r),s});return new v({items:i})}readLegacyfeatureCollectionJSON(e,t){return b(t)?N(t.featureCollection):null}get fullExtent(){var r;const e=this.spatialReference,t=E();return this.sublayers!=null?this.sublayers.forEach(({fullBounds:i})=>i!=null?J(t,i,t):t,t):(r=this.featureCollectionJSON)!=null&&r.layers.some(i=>i.layerDefinition.extent)&&this.featureCollectionJSON.layers.forEach(i=>{const a=O(i.layerDefinition.extent,e).geometry;a!=null&&J(t,a,t)}),D(t,P)?O(F(),e).geometry:R(t,e)}readMinScale(e,t){for(const r of t.layers)if(r.layerDefinition.minScale!=null)return r.layerDefinition.minScale;return 0}readMaxScale(e,t){for(const r of t.layers)if(r.layerDefinition.maxScale!=null)return r.layerDefinition.maxScale;return 0}get multipointLayer(){return this._findSublayer("multipointLayer")}get pointLayer(){return this._findSublayer("pointLayer")}get polygonLayer(){return this._findSublayer("polygonLayer")}get polylineLayer(){return this._findSublayer("polylineLayer")}readSpatialReference(e,t){return t.layers.length?S.fromJSON(t.layers[0].layerDefinition.spatialReference):S.WGS84}readSublayers(e,t,r){if(b(t))return null;const i=[];let a=t.layers.reduce((s,p)=>Math.max(s,p.layerDefinition.id??-1),-1)+1;for(const s of t.layers){const{layerDefinition:p,featureSet:y}=s,u=p.id??a++,c=B(s);if(c!=null){const f=new m({id:c.id,title:p.name,layerId:u,layer:this,graphics:y.features.map(({geometry:g,symbol:w,attributes:z,popupInfo:A})=>K.fromJSON({attributes:z,geometry:g,symbol:w,popupTemplate:A}))});i.push(f)}}return new v(i)}writeSublayers(e,t,r,i){var c;const{minScale:a,maxScale:s}=this;if(e==null)return;const p=e.some(f=>f.graphics.length>0);if(!this.capabilities.operations.supportsMapNotesEditing)return void(p&&((c=i==null?void 0:i.messages)==null?void 0:c.push(new Q("map-notes-layer:editing-not-supported","New map notes cannot be added to this layer"))));const y=[];let u=this.spatialReference.toJSON();e:for(const f of e)for(const g of f.graphics)if(g.geometry!=null){u=g.geometry.spatialReference.toJSON();break e}for(const f of C){const g=e.find(w=>f.id===w.id);this._writeMapNoteSublayer(y,g,f,a,s,u,i)}U("featureCollection.layers",y,t)}get textLayer(){return this._findSublayer("textLayer")}load(e){return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Feature Collection"]},e)),Promise.resolve(this)}read(e,t){"featureCollection"in e&&(e=N(e),Object.assign(e,e.featureCollection)),super.read(e,t)}async beforeSave(){if(this.sublayers==null)return;let e=null;const t=[];for(const i of this.sublayers)for(const a of i.graphics)if(a.geometry!=null){const s=a.geometry;e?V(s.spatialReference,e)||(Y(s.spatialReference,e)||X()||await Z(),a.geometry=ee(s,e)):e=s.spatialReference,t.push(a)}const r=await ie(t.map(i=>i.geometry));t.forEach((i,a)=>i.geometry=r[a])}_findSublayer(e){var t;return this.sublayers==null?null:((t=this.sublayers)==null?void 0:t.find(r=>r.id===e))??null}_writeMapNoteSublayer(e,t,r,i,a,s,p){const y=[];if(t!=null){for(const u of t.graphics)this._writeMapNote(y,u,r.geometryType,p);this._normalizeObjectIds(y,x),e.push({layerDefinition:{name:t.title,drawingInfo:{renderer:{type:"simple",symbol:N(r.identifyingSymbol)}},id:t.layerId,geometryType:r.geometryTypeJSON,minScale:i,maxScale:a,objectIdField:"OBJECTID",fields:[x.toJSON(),me.toJSON()],spatialReference:s},featureSet:{features:y,geometryType:r.geometryTypeJSON}})}}_writeMapNote(e,t,r,i){var u,c;if(t==null)return;const{geometry:a,symbol:s,popupTemplate:p}=t;if(a==null)return;if(a.type!==r)return void((u=i==null?void 0:i.messages)==null?void 0:u.push(new T("map-notes-layer:invalid-geometry-type",`Geometry "${a.type}" cannot be saved in "${r}" layer`,{graphic:t})));if(s==null)return void((c=i==null?void 0:i.messages)==null?void 0:c.push(new T("map-notes-layer:no-symbol","Skipping map notes with no symbol",{graphic:t})));const y={attributes:{...t.attributes},geometry:a.toJSON(),symbol:s.toJSON()};p!=null&&(y.popupInfo=p.toJSON()),e.push(y)}_normalizeObjectIds(e,t){const r=t.name;let i=ne(r,e)+1;const a=new Set;for(const s of e){s.attributes||(s.attributes={});const{attributes:p}=s;(p[r]==null||a.has(p[r]))&&(p[r]=i++),a.add(p[r])}}};o([l({readOnly:!0})],n.prototype,"capabilities",void 0),o([h(["portal-item","web-map"],"capabilities",["layers"])],n.prototype,"readCapabilities",null),o([l({readOnly:!0})],n.prototype,"featureCollections",void 0),o([h(["web-map","portal-item"],"featureCollections",["layers"])],n.prototype,"readFeatureCollections",null),o([l({readOnly:!0,json:{origins:{"web-map":{write:{enabled:!0,target:"featureCollection"}}}}})],n.prototype,"featureCollectionJSON",void 0),o([h(["web-map","portal-item"],"featureCollectionJSON",["featureCollection"])],n.prototype,"readLegacyfeatureCollectionJSON",null),o([l({readOnly:!0,json:{read:!0,write:{enabled:!0,ignoreOrigin:!0}}})],n.prototype,"featureCollectionType",void 0),o([l({readOnly:!0})],n.prototype,"fullExtent",null),o([l({readOnly:!0,json:{origins:{"web-map":{write:{target:"featureCollection.showLegend",overridePolicy(){return{enabled:this.featureCollectionJSON!=null}}}}}}})],n.prototype,"legendEnabled",void 0),o([l({type:["show","hide","hide-children"]})],n.prototype,"listMode",void 0),o([l({type:Number,nonNullable:!0,json:{write:!1}})],n.prototype,"minScale",void 0),o([h(["web-map","portal-item"],"minScale",["layers"])],n.prototype,"readMinScale",null),o([l({type:Number,nonNullable:!0,json:{write:!1}})],n.prototype,"maxScale",void 0),o([h(["web-map","portal-item"],"maxScale",["layers"])],n.prototype,"readMaxScale",null),o([l({readOnly:!0})],n.prototype,"multipointLayer",null),o([l({value:"ArcGISFeatureLayer",type:["ArcGISFeatureLayer"]})],n.prototype,"operationalLayerType",void 0),o([l({readOnly:!0})],n.prototype,"pointLayer",null),o([l({readOnly:!0})],n.prototype,"polygonLayer",null),o([l({readOnly:!0})],n.prototype,"polylineLayer",null),o([l({type:S})],n.prototype,"spatialReference",void 0),o([h(["web-map","portal-item"],"spatialReference",["layers"])],n.prototype,"readSpatialReference",null),o([l({readOnly:!0,json:{origins:{"web-map":{write:{ignoreOrigin:!0}}}}})],n.prototype,"sublayers",void 0),o([h("web-map","sublayers",["layers"])],n.prototype,"readSublayers",null),o([te("web-map","sublayers")],n.prototype,"writeSublayers",null),o([l({readOnly:!0})],n.prototype,"textLayer",null),o([l()],n.prototype,"title",void 0),o([l({readOnly:!0,json:{read:!1}})],n.prototype,"type",void 0),n=o([L("esri.layers.MapNotesLayer")],n);const wt=n;export{wt as default};
