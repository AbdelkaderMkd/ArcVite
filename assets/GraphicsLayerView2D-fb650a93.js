import{g as p,j as o,V as a,R as m,a as s,b as g,c as l}from"./index-694ce44d.js";import{f as c,d as n}from"./LayerView-0c3abff6.js";import{i as d}from"./GraphicContainer-943902c4.js";import{o as u}from"./GraphicsView2D-5322468e.js";import"./Container-98784fc3.js";import"./parser-efb788bb.js";import"./definitions-a76b7e9e.js";import"./enums-b14466b3.js";import"./Texture-de2922f0.js";import"./color-807fab76.js";import"./enums-f1a6a48a.js";import"./VertexElementDescriptor-2925c6af.js";import"./BaseGraphicContainer-567f458d.js";import"./FeatureContainer-378ec050.js";import"./AttributeStoreView-4542327c.js";import"./TiledDisplayObject-a6540d9f.js";import"./LabelClass-1bdf648f.js";import"./labelUtils-9d1c424f.js";import"./defaultsJSON-b087dd4d.js";import"./featureFlags-6cf6afd3.js";import"./diffUtils-a329eb07.js";import"./labelingInfo-ea1763c0.js";import"./WGLContainer-8c37a38c.js";import"./VertexArrayObject-51fe5775.js";import"./ProgramTemplate-6419e6e4.js";import"./GeometryUtils-c90a4bf4.js";import"./heatmapUtils-c03ab930.js";import"./StyleDefinition-29c49b98.js";import"./config-1337d16e.js";import"./earcut-25af7c0e.js";import"./featureConversionUtils-0828833d.js";import"./OptimizedGeometry-33b2eb0d.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./visualVariablesUtils-a4775b4a.js";import"./ExpandedCIM-77060c38.js";import"./BidiEngine-9a40f2f4.js";import"./GeometryUtils-984e8446.js";import"./utils-f5aaa5be.js";import"./Rect-ea14f53a.js";import"./quantizationUtils-d5ac8a7f.js";import"./floatRGBA-1cdb5626.js";import"./clusterUtils-2a049c35.js";import"./SizeVariable-f2e14e5f.js";import"./colorRamps-c91442f9.js";import"./LegendOptions-457bb874.js";import"./lengthUtils-ee5fce51.js";import"./util-2693a291.js";import"./TileContainer-8ad69116.js";import"./vec3f32-ad1dc57f.js";import"./normalizeUtils-02a847e9.js";import"./normalizeUtilsCommon-85cfc130.js";import"./normalizeUtilsSync-9066bce3.js";import"./projectionSupport-657658d1.js";import"./json-48e3ea08.js";import"./Matcher-a8074a44.js";import"./tileUtils-c2f19f52.js";import"./TurboLine-3f03f801.js";import"./LRUCache-962ebf1b.js";import"./devEnvironmentUtils-5002a058.js";import"./styleUtils-fadc7778.js";import"./webStyleSymbolUtils-ff0ff2ec.js";import"./ComputedAttributeStorage-cfc9b782.js";import"./FieldsIndex-c27e2366.js";import"./arcadeTimeUtils-63972b50.js";import"./executionError-c92d3b85.js";const w={remove(){},pause(){},resume(){}};let e=class extends c(n){constructor(){super(...arguments),this._highlightIds=new Map}attach(){this.graphicsView=new u({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:this.layer.graphics,container:new d(this.view.featuresTilingScheme)}),this._updateHighlight(),this.container.addChild(this.graphicsView.container),this.addAttachHandles(this.layer.on("graphic-update",this.graphicsView.graphicUpdateHandler))}detach(){this.container.removeAllChildren(),this.graphicsView=p(this.graphicsView)}async hitTest(i){return this.graphicsView?this.graphicsView.hitTest(i).map(t=>({type:"graphic",graphic:t,mapPoint:i,layer:this.layer})):null}async fetchPopupFeatures(i){return this.graphicsView?this.graphicsView.hitTest(i).filter(t=>!!t.popupTemplate):[]}queryGraphics(){return Promise.resolve(this.graphicsView.graphics)}update(i){this.graphicsView.processUpdate(i)}moveStart(){}viewChange(){this.graphicsView.viewChange()}moveEnd(){}isUpdating(){return!this.graphicsView||this.graphicsView.updating}highlight(i){let t;typeof i=="number"?t=[i]:i instanceof o?t=[i.uid]:Array.isArray(i)&&i.length>0?t=typeof i[0]=="number"?i:i.map(h=>h&&h.uid):a.isCollection(i)&&i.length>0&&(t=i.map(h=>h&&h.uid).toArray());const r=t==null?void 0:t.filter(m);return r!=null&&r.length?(this._addHighlight(r),{remove:()=>this._removeHighlight(r)}):w}_addHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const r=this._highlightIds.get(t);this._highlightIds.set(t,r+1)}else this._highlightIds.set(t,1);this._updateHighlight()}_removeHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const r=this._highlightIds.get(t)-1;r===0?this._highlightIds.delete(t):this._highlightIds.set(t,r)}this._updateHighlight()}_updateHighlight(){var i;(i=this.graphicsView)==null||i.setHighlight(Array.from(this._highlightIds.keys()))}};s([g()],e.prototype,"graphicsView",void 0),e=s([l("esri.views.2d.layers.GraphicsLayerView2D")],e);const bi=e;export{bi as default};
