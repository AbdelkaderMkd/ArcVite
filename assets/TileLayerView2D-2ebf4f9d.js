import{bk as w,bl as y,bm as I,bn as V,bo as b,bp as v,bq as H,br as o,bs as c,b2 as T,aC as n,aD as g,aF as q}from"./index-3572d442.js";import"./Container-6f579da3.js";import"./BufferPool-774466b9.js";import"./enums-b1d611e3.js";import"./WGLContainer-98654cd1.js";import"./vec4f32-0d1b2306.js";import"./color-5d593af9.js";import"./definitions-f926d1a5.js";import"./MaterialKey-05dc7bce.js";import"./number-e491b09e.js";import"./MagnifierPrograms-943bd581.js";import{r as U}from"./GraphicsView2D-42b00db6.js";import"./AttributeStoreView-4c28c213.js";import{r as C,o as f,n as d}from"./imageUtils-678cca8b.js";import{m as S}from"./LayerView2D-75cdb63f.js";import{a as Q}from"./HighlightGraphicContainer-25c7a673.js";import{u as k}from"./LayerView-e8e5ef51.js";import{a as F}from"./RefreshableLayerView-13947b50.js";import{S as P,G}from"./MapServiceLayerViewHelper-34b42220.js";import"./WGLBrushVTLSymbol-4e301e2a.js";import"./GeometryUtils-dd03fc25.js";import"./ShaderCompiler-77d0dcb6.js";import"./ProgramTemplate-1a91efd6.js";import"./heatmapTextureUtils-61534fe7.js";import"./alignmentUtils-ae955d28.js";import"./cimAnalyzer-150a8296.js";import"./BidiEngine-9a40f2f4.js";import"./labelPoint-bb8bc683.js";import"./GeometryUtils-984e8446.js";import"./Rect-ea14f53a.js";import"./Rasterizer-0aad8952.js";import"./rasterizingUtils-5eb53e8f.js";import"./pbf-db891cc3.js";import"./imageutils-b3f5044b.js";import"./Matcher-5a02b3c0.js";import"./visualVariablesUtils-1fa1b221.js";import"./tileUtils-c2f19f52.js";import"./TurboLine-dc12a110.js";import"./ExpandedCIM-ae1f6e0f.js";import"./CircularArray-ef508845.js";import"./throttle-7bf02de9.js";import"./ComputedAttributeStorage-a3f2b133.js";import"./TimeOnly-b48aab9d.js";import"./normalizeUtilsSync-86570995.js";import"./projectionSupport-cd867045.js";import"./json-48e3ea08.js";import"./util-cd4c507d.js";import"./BitmapTileContainer-7413d4d4.js";import"./Bitmap-2db2bee0.js";import"./TileContainer-5e05f4a0.js";import"./BaseGraphicContainer-3f2a02af.js";import"./FeatureContainer-b839d6c2.js";import"./popupUtils-8716dbe3.js";const L=[0,0];let a=class extends F(C(S(k))){constructor(){super(...arguments),this._fetchQueue=null,this._highlightGraphics=new w,this._highlightView=null,this._popupHighlightHelper=null,this._tileStrategy=null,this.layer=null}get resampling(){return!("resampling"in this.layer)||this.layer.resampling!==!1}get tilemapCache(){return"tilemapCache"in this.layer?this.layer.tilemapCache:null}update(t){var e;this._fetchQueue.pause(),this._fetchQueue.state=t.state,this._tileStrategy.update(t),this._fetchQueue.resume(),(e=this._highlightView)==null||e.processUpdate(t)}attach(){const t="tileServers"in this.layer?this.layer.tileServers:null,e=this.tilemapCache;if(this._tileInfoView=new y(this.layer.tileInfo,this.layer.fullExtent,e==null?void 0:e.effectiveMinLOD,e==null?void 0:e.effectiveMaxLOD),this._fetchQueue=new I({tileInfoView:this._tileInfoView,concurrency:t&&10*t.length||10,process:(i,s)=>this.fetchTile(i,s)}),this._tileStrategy=new V({cachePolicy:"keep",resampling:this.resampling,acquireTile:i=>this.acquireTile(i),releaseTile:i=>this.releaseTile(i),tileInfoView:this._tileInfoView}),P(this,this.layer)){const i=this._highlightView=new U({view:this.view,graphics:this._highlightGraphics,requestUpdateCallback:()=>this.requestUpdate(),container:new Q(this.view.featuresTilingScheme),defaultPointSymbolEnabled:!1});this.container.addChild(this._highlightView.container),this._popupHighlightHelper=new G({createFetchPopupFeaturesQueryGeometry:(s,h)=>b(s,h,this.view),highlightGraphics:this._highlightGraphics,highlightGraphicUpdated:(s,h)=>{i.graphicUpdateHandler({graphic:s,property:h})},layerView:this,updatingHandles:this._updatingHandles})}this.requestUpdate(),this.addAttachHandles(this._updatingHandles.add(()=>this.resampling,()=>{this.doRefresh()})),super.attach()}detach(){var t,e;super.detach(),this._tileStrategy.destroy(),this._fetchQueue.clear(),this.container.removeAllChildren(),(t=this._popupHighlightHelper)==null||t.destroy(),(e=this._highlightView)==null||e.destroy(),this._fetchQueue=this._tileStrategy=this._tileInfoView=this._popupHighlightHelper=null}async fetchPopupFeatures(t,e){return this._popupHighlightHelper?this._popupHighlightHelper.fetchPopupFeatures(t,e):[]}highlight(t){return this._popupHighlightHelper?this._popupHighlightHelper.highlight(t):v()}moveStart(){this.requestUpdate()}viewChange(){this.requestUpdate()}moveEnd(){this.requestUpdate()}supportsSpatialReference(t){var e;return H((e=this.layer.tileInfo)==null?void 0:e.spatialReference,t)}async doRefresh(){if(this.attached){if(this.suspended)return this._tileStrategy.clear(),void this.requestUpdate();this._fetchQueue.reset(),this._tileStrategy.refresh(t=>this._updatingHandles.addPromise(this._enqueueTileFetch(t)))}}acquireTile(t){const e=this._bitmapView.createTile(t),i=e.bitmap;return[i.x,i.y]=this._tileInfoView.getTileCoords(L,e.key),i.resolution=this._tileInfoView.getTileResolution(e.key),[i.width,i.height]=this._tileInfoView.tileInfo.size,this._updatingHandles.addPromise(this._enqueueTileFetch(e)),this._bitmapView.addChild(e),this.requestUpdate(),e}releaseTile(t){this._fetchQueue.abort(t.key.id),this._bitmapView.removeChild(t),t.once("detach",()=>t.destroy()),this.requestUpdate()}async fetchTile(t,e={}){const i=this.tilemapCache,{signal:s,resamplingLevel:h=0}=e;if(!i)try{return await this._fetchImage(t,s)}catch(r){if(!o(r)&&!this.resampling)return f(this._tileInfoView.tileInfo.size);if(h<3){const m=this._tileInfoView.getTileParentId(t.id);if(m){const u=new c(m),_=await this.fetchTile(u,{...e,resamplingLevel:h+1});return d(this._tileInfoView,_,u,t)}}throw r}const l=new c(0,0,0,0);let p;try{if(await i.fetchAvailabilityUpsample(t.level,t.row,t.col,l,{signal:s}),l.level!==t.level&&!this.resampling)return f(this._tileInfoView.tileInfo.size);p=await this._fetchImage(l,s)}catch(r){if(o(r))throw r;p=await this._fetchImage(t,s)}return this.resampling?d(this._tileInfoView,p,l,t):p}async _enqueueTileFetch(t){if(!this._fetchQueue.has(t.key.id)){try{const e=await this._fetchQueue.push(t.key);t.bitmap.source=e,t.bitmap.width=this._tileInfoView.tileInfo.size[0],t.bitmap.height=this._tileInfoView.tileInfo.size[1],t.once("attach",()=>this.requestUpdate())}catch(e){o(e)||T.getLogger(this).error(e)}this.requestUpdate()}}async _fetchImage(t,e){return this.layer.fetchImageBitmapTile(t.level,t.row,t.col,{signal:e})}};n([g()],a.prototype,"resampling",null),n([g()],a.prototype,"tilemapCache",null),a=n([q("esri.views.2d.layers.TileLayerView2D")],a);const Lt=a;export{Lt as default};
