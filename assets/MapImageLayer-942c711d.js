import{bF as $,a6 as w,cR as b,bo as f,cY as I,a1 as g,aM as O,cZ as T,c_ as E,T as v,d as M,a as s,b as p,c$ as S,aS as R,aP as P,c as F,aE as L,aO as j}from"./index-bee19082.js";import{O as N}from"./MultiOriginJSONSupport-90852d48.js";import{i as J}from"./APIKeyMixin-22fe64e4.js";import{E as q,f as U,Y as k}from"./SublayersOwner-45ef4526.js";import{l as A}from"./ArcGISService-04a259ca.js";import{a as _}from"./BlendLayer-4a08599c.js";import{o as V}from"./CustomParametersMixin-2a01ea72.js";import{c as z}from"./OperationalLayer-48455f3a.js";import{j as B}from"./PortalLayer-c186cb46.js";import{p as C}from"./RefreshableLayer-59767117.js";import{t as D}from"./ScaleRangeLayer-13e4b522.js";import{a as G}from"./TemporalLayer-1eee5a51.js";import{f as H}from"./commonProperties-4b40fdaa.js";import{m as K}from"./ExportImageParameters-6e966533.js";import{t as W}from"./imageBitmapUtils-94cc7827.js";import{e as x}from"./sublayerUtils-982601a9.js";import{e as Y}from"./versionUtils-acb2dbf9.js";import"./Version-3193dfa6.js";import"./portalItemUtils-36231200.js";import"./UniqueValueRenderer-67cae15b.js";import"./LegendOptions-7d2b0d06.js";import"./diffUtils-5efc4e3a.js";import"./SizeVariable-a637eb4e.js";import"./colorRamps-1e6ee6d2.js";import"./lengthUtils-184c6350.js";import"./ColorStop-df718c89.js";import"./featureFlags-59d582dc.js";import"./styleUtils-566a2b78.js";import"./jsonUtils-e5534318.js";import"./DictionaryLoader-58c9ede1.js";import"./LRUCache-a940efe6.js";import"./FieldsIndex-78cea5f5.js";import"./heatmapUtils-08695630.js";import"./LabelClass-973a5d40.js";import"./labelUtils-df85df77.js";import"./defaultsJSON-b087dd4d.js";import"./QueryTask-b8be7599.js";import"./Query-9eb6f731.js";import"./Field-61e30cf2.js";import"./fieldType-0f702807.js";import"./executeForIds-64f38598.js";import"./query-408996ce.js";import"./normalizeUtils-0a6ed915.js";import"./normalizeUtilsCommon-573f377b.js";import"./pbfQueryUtils-8fea5e02.js";import"./pbf-ef44f167.js";import"./OptimizedGeometry-33b2eb0d.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./queryZScale-5dd15509.js";import"./executeQueryJSON-0cd5c901.js";import"./FeatureSet-1e3ad43d.js";import"./executeQueryPBF-931e25cf.js";import"./featureConversionUtils-de082d0e.js";import"./FeatureType-00ae44fe.js";import"./FeatureTemplate-4f80caee.js";import"./labelingInfo-970a5843.js";import"./serviceCapabilitiesUtils-fe7287a1.js";import"./AttachmentQuery-97c94e11.js";import"./popupUtils-a632b608.js";import"./jsonUtils-403f1345.js";import"./parser-a5e5dd1e.js";import"./ElevationInfo-659cc10d.js";import"./floorFilterUtils-080a7cd2.js";let i=class extends _(G(D(q(U(A(z(B(N(C(J(V($(L))))))))))))){constructor(...e){super(...e),this.dateFieldsTimeReference=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeReference=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,o){return typeof e=="string"?{url:e,...o}:e}load(e){const o=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(w).then(()=>this._fetchService(o))),Promise.resolve(this)}readImageFormat(e,o){const m=o.supportedImageFormatTypes;return m&&m.includes("PNG32")?"png32":"png24"}writeSublayers(e,o,m,t){var h;if(!this.loaded||!e)return;const a=e.slice().reverse().flatten(({sublayers:r})=>r&&r.toArray().reverse()).toArray();let n=!1;if(this.capabilities&&this.capabilities.operations.supportsExportMap&&((h=this.capabilities.exportMap)!=null&&h.supportsDynamicLayers)){const r=b(t.origin);if(r===f.PORTAL_ITEM){const c=this.createSublayersForOrigin("service").sublayers;n=x(a,c,f.SERVICE)}else if(r>f.PORTAL_ITEM){const c=this.createSublayersForOrigin("portal-item");n=x(a,c.sublayers,b(c.origin))}}const l=[],d={writeSublayerStructure:n,...t};let y=n;a.forEach(r=>{const c=r.write({},d);l.push(c),y=y||r.originOf("visible")==="user"}),l.some(r=>Object.keys(r).length>1)&&(o.layers=l),y&&(o.visibleLayers=a.filter(r=>r.visible).map(r=>r.id))}createExportImageParameters(e,o,m,t){const a=t&&t.pixelRatio||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian());const n=new K({layer:this,floors:t==null?void 0:t.floors,scale:I({extent:e,width:o})*a}),l=n.toJSON();n.destroy();const d=!t||!t.rotation||this.version<10.3?{}:{rotation:-t.rotation},y=e&&e.spatialReference,h=y.wkid||JSON.stringify(y.toJSON());l.dpi*=a;const r={};if(t!=null&&t.timeExtent){const{start:c,end:u}=t.timeExtent.toJSON();r.time=c&&u&&c===u?""+c:`${c??"null"},${u??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(r.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:h,imageSR:h,size:o+","+m,...l,...d,...r}}async fetchImage(e,o,m,t){const{data:a}=await this._fetchImage("image",e,o,m,t);return a}async fetchImageBitmap(e,o,m,t){const{data:a,url:n}=await this._fetchImage("blob",e,o,m,t);return W(a,n,t==null?void 0:t.signal)}async fetchRecomputedExtents(e={}){const o={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:m}=await g(this.url,o),{extent:t,fullExtent:a,timeExtent:n}=m,l=t||a;return{fullExtent:l&&O.fromJSON(l),timeExtent:n&&T.fromJSON({start:n[0],end:n[1]})}}loadAll(){return E(this,e=>{e(this.allSublayers)})}serviceSupportsSpatialReference(e){return Y(this,e)}async _fetchImage(e,o,m,t,a){var d,y,h;const n={responseType:e,signal:(a==null?void 0:a.signal)??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(o,m,t,a),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},l=this.parsedUrl.path+"/export";if(((d=n.query)==null?void 0:d.dynamicLayers)!=null&&!((h=(y=this.capabilities)==null?void 0:y.exportMap)!=null&&h.supportsDynamicLayers))throw new v("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:n.query});try{const{data:r}=await g(l,n);return{data:r,url:l}}catch(r){throw M(r)?r:new v("mapimagelayer:image-fetch-error",`Unable to load image: ${l}`,{error:r})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:o,ssl:m}=await g(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});m&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=o,this.read(o,{origin:"service",url:this.parsedUrl})}};s([p({type:S})],i.prototype,"dateFieldsTimeReference",void 0),s([p({type:Boolean})],i.prototype,"datesInUnknownTimezone",void 0),s([p()],i.prototype,"dpi",void 0),s([p()],i.prototype,"gdbVersion",void 0),s([p()],i.prototype,"imageFormat",void 0),s([R("imageFormat",["supportedImageFormatTypes"])],i.prototype,"readImageFormat",null),s([p({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],i.prototype,"imageMaxHeight",void 0),s([p({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],i.prototype,"imageMaxWidth",void 0),s([p()],i.prototype,"imageTransparency",void 0),s([p({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],i.prototype,"isReference",void 0),s([p({json:{read:!1,write:!1}})],i.prototype,"labelsVisible",void 0),s([p({type:["ArcGISMapServiceLayer"]})],i.prototype,"operationalLayerType",void 0),s([p({json:{read:!1,write:!1}})],i.prototype,"popupEnabled",void 0),s([p({type:S})],i.prototype,"preferredTimeReference",void 0),s([p()],i.prototype,"sourceJSON",void 0),s([p({json:{write:{ignoreOrigin:!0}}})],i.prototype,"sublayers",void 0),s([P("sublayers",{layers:{type:[k]},visibleLayers:{type:[j]}})],i.prototype,"writeSublayers",null),s([p({type:["show","hide","hide-children"]})],i.prototype,"listMode",void 0),s([p({json:{read:!1},readOnly:!0,value:"map-image"})],i.prototype,"type",void 0),s([p(H)],i.prototype,"url",void 0),i=s([F("esri.layers.MapImageLayer")],i);const at=i;export{at as default};
